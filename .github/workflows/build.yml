name: Build Khmer STT Application

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # Will trigger on version tags like v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - beta
          - release

# Required permissions for GitHub releases
permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pillow
        
    - name: Create resources directory and icon
      run: |
        python create_icon.py
      
    - name: Build with PyInstaller
      run: |
        pyinstaller --clean --icon=resources/icon.ico --add-data="resources;resources" --add-data="app/i18n;app/i18n" --hidden-import=keyring.backends.Windows --hidden-import=pynput.keyboard._win32 --hidden-import=pynput.mouse._win32 --hidden-import=google.generativeai --hidden-import=elevenlabs --collect-all=pynput --collect-all=elevenlabs --collect-all=pyaudio --collect-all=keyring --collect-all=google.generativeai --onefile --noconsole --name="Khmer STT" main.py
        
    # Fix for tzdata missing warning
    - name: Add missing imports
      run: |
        pip install tzdata
        
    # Determine version
    - name: Determine version
      id: get_version
      run: |
        # Check if this is a tag-based release
        if ("${{ github.ref }}" -like "refs/tags/v*") {
          $version = "${{ github.ref }}".Replace("refs/tags/v", "")
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "is_release=true" >> $env:GITHUB_OUTPUT
          echo "release_name=Khmer STT v$version" >> $env:GITHUB_OUTPUT
          echo "Using tagged version: $version"
        }
        # Check if this is a manual workflow dispatch
        elseif ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $releaseType = "${{ github.event.inputs.release_type }}"
          $version = "0.$(Get-Date -Format 'yMMdd').${{ github.run_number }}"
          
          if ($releaseType -eq "release") {
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "is_release=true" >> $env:GITHUB_OUTPUT
            echo "release_name=Khmer STT v$version" >> $env:GITHUB_OUTPUT
            echo "Creating release version: $version"
          }
          else {
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "is_release=false" >> $env:GITHUB_OUTPUT
            echo "release_name=Khmer STT $releaseType build $version" >> $env:GITHUB_OUTPUT
            echo "Creating $releaseType version: $version"
          }
        }
        # Default case for regular pushes - always create test builds
        else {
          $version = "0.$(Get-Date -Format 'yMMdd').${{ github.run_number }}"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "is_release=false" >> $env:GITHUB_OUTPUT
          echo "release_name=Khmer STT Test Build $version" >> $env:GITHUB_OUTPUT
          echo "Creating test build: $version"
        }
      
    # Copy the EXE to a location with version in the filename
    - name: Prepare artifact
      run: |
        copy "dist\Khmer STT.exe" "Khmer STT-${{ steps.get_version.outputs.version }}.exe"
        
    # Upload artifacts to Actions
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: khmer-stt-release-files
        path: |
          Khmer STT-${{ steps.get_version.outputs.version }}.exe

    # Create GitHub Release (if this is a release or tag)
    - name: Create Release
      if: steps.get_version.outputs.is_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ steps.get_version.outputs.release_name }}
        draft: false
        prerelease: ${{ github.event.inputs.release_type != 'release' }}
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.get_version.outputs.version) }}
        files: |
          Khmer STT-${{ steps.get_version.outputs.version }}.exe
        fail_on_unmatched_files: true
